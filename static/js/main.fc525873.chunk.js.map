{"version":3,"sources":["components/RecipeDetails.js","components/Recipe.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["RecipeDetails","ingredients","map","ingredient","className","text","weight","uuidv4","Recipe","recipe","useState","show","setShow","label","image","url","src","alt","href","target","rel","onClick","Alert","alert","App","query","setQuery","recipes","setRecipes","setAlert","loading","setLoading","getData","a","Axios","get","result","data","more","console","log","hits","onSubmit","e","preventDefault","type","name","onChange","value","autoComplete","placeholder","color","height","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAGe,SAASA,EAAT,GACX,OADmD,EAAfC,YACjBC,KAAI,SAAAC,GACnB,OACE,qBAAmBC,UAAU,kBAA7B,UACE,oBAAIA,UAAU,kBAAd,SAAiCD,EAAWE,OAC5C,qBAAID,UAAU,oBAAd,sBAA4CD,EAAWG,YAFhDC,kBCHnB,IAiBeC,EAjBA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACLC,oBAAS,GADJ,mBACtBC,EADsB,KAChBC,EADgB,OAEcH,EAAOA,OAA1CI,EAFqB,EAErBA,MAAOC,EAFc,EAEdA,MAAOC,EAFO,EAEPA,IAAKd,EAFE,EAEFA,YAE3B,OACE,sBAAKG,UAAU,SAAf,UACE,6BAAKS,IACL,qBAAKG,IAAKF,EAAOG,IAAKJ,IACtB,mBAAGK,KAAMH,EAAKI,OAAO,SAASC,IAAI,sBAAlC,iBAGA,wBAAQC,QAAS,kBAAMT,GAASD,IAAhC,yBACCA,GAAQ,cAACX,EAAD,CAAeC,YAAaA,QCL5BqB,EARD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACZ,OACI,qBAAKnB,UAAU,QAAf,SACI,6BAAKmB,O,iBCkEFC,MA/Df,WAAgB,IAAD,EACad,mBAAS,IADtB,mBACNe,EADM,KACCC,EADD,OAEiBhB,mBAAS,IAF1B,mBAENiB,EAFM,KAEGC,EAFH,OAGalB,mBAAS,IAHtB,mBAGNa,EAHM,KAGCM,EAHD,OAIiBnB,oBAAS,GAJ1B,mBAINoB,EAJM,KAIGC,EAJH,KASPhB,EAAG,0CAAsCU,EAAtC,mBAHM,WAGN,oBAFO,oCAIVO,EAAO,uCAAG,4BAAAC,EAAA,yDACA,KAAVR,EADU,wBAEZG,EAAW,IACXG,GAAW,GAHC,SAISG,IAAMC,IAAIpB,GAJnB,WAINqB,EAJM,QAKAC,KAAKC,KALL,uBAMVP,GAAW,GAND,kBAOHF,EAAS,2BAPN,OASZU,QAAQC,IAAIJ,GACZR,EAAWQ,EAAOC,KAAKI,MACvBf,EAAS,IACTG,EAAS,IACTE,GAAW,GAbC,wBAeZF,EAAS,wBAfG,4CAAH,qDA0Bb,OACE,sBAAKzB,UAAU,MAAf,UACE,oDACA,uBAAMsC,SARO,SAAAC,GACfA,EAAEC,iBACFZ,KAM4B5B,UAAU,cAApC,UACa,KAAVmB,GAAgB,cAAC,EAAD,CAAOA,MAAOA,IAC/B,uBACEsB,KAAK,OACLC,KAAK,QACLC,SAfS,SAAAJ,GAAC,OAAIjB,EAASiB,EAAExB,OAAO6B,QAgBhCA,MAAOvB,EACPwB,aAAa,MACbC,YAAY,gBAEd,uBAAOL,KAAK,SAASG,MAAM,cAE7B,sBAAK5C,UAAU,UAAf,UAEI0B,GAAW,cAAC,IAAD,CAAQe,KAAK,UAAUM,MAAM,UAAUC,OAAQ,GAAIC,MAAO,KAEtE1B,IAAY,IACXA,EAAQzB,KAAI,SAAAO,GAAM,OAAI,cAAC,EAAD,CAAuBA,OAAQA,GAAlBF,yBCrD9B+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fc525873.chunk.js","sourcesContent":["import React from 'react'\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport default function RecipeDetails({ ingredients }) {\r\n    return ingredients.map(ingredient => {\r\n        return (\r\n          <ul key={uuidv4()} className=\"ingredient-list\">\r\n            <li className=\"ingredient-text\">{ingredient.text}</li>\r\n            <li className=\"ingredient-weight\">Weight - {ingredient.weight}</li>\r\n          </ul>\r\n        );\r\n      });\r\n}\r\n","import React, { useState } from \"react\";\r\nimport RecipeDetails from \"./RecipeDetails\";\r\n\r\nconst Recipe = ({ recipe }) => {\r\n  const [show, setShow] = useState(false);\r\n  const { label, image, url, ingredients } = recipe.recipe;\r\n\r\n  return (\r\n    <div className=\"recipe\">\r\n      <h2>{label}</h2>\r\n      <img src={image} alt={label} />\r\n      <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        URL\r\n      </a>\r\n      <button onClick={() => setShow(!show)}>Ingredients</button>\r\n      {show && <RecipeDetails ingredients={ingredients} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;","import react from 'react';\r\n\r\nconst Alert = ({alert}) => {\r\n    return (\r\n        <div className=\"alert\">\r\n            <h3>{alert}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Axios from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Recipe from \"./components/Recipe\";\nimport Alert from \"./components/Alert\";\nimport Loader from 'react-loader-spinner';\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [recipes, setRecipes] = useState([]);\n  const [alert, setAlert] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const APP_ID = \"4e9f05eb\";\n  const APP_KEY = \"9b904d703fa0d46a88ce1ac63f29f498\";\n\n  const url = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  const getData = async () => {\n    if (query !== \"\") {\n      setRecipes([]);\n      setLoading(true);\n      const result = await Axios.get(url);\n      if (!result.data.more) {\n        setLoading(false)\n        return setAlert(\"No food with such name\");\n      }\n      console.log(result);\n      setRecipes(result.data.hits);\n      setQuery(\"\");\n      setAlert(\"\");\n      setLoading(false)\n    } else {\n      setAlert(\"Please fill the form\");\n    }\n  };\n\n  const onChange = e => setQuery(e.target.value);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    getData();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Food Searching App</h1>\n      <form onSubmit={onSubmit} className=\"search-form\">\n        {alert !== \"\" && <Alert alert={alert} />}\n        <input\n          type=\"text\"\n          name=\"query\"\n          onChange={onChange}\n          value={query}\n          autoComplete=\"off\"\n          placeholder=\"Search Food\"\n        />\n        <input type=\"submit\" value=\"Search\" />\n      </form>\n      <div className=\"recipes\">\n        {\n          loading && <Loader type=\"Circles\" color=\"#00BFFF\" height={80} width={80}/>\n        }\n        {recipes !== [] &&\n          recipes.map(recipe => <Recipe key={uuidv4()} recipe={recipe} />)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}